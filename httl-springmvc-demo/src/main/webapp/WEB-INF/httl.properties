# 加载顺序 httl-default.properties > httl-<mode>.properties > httl.properties
# JVM -D选项(只会读取以httl.开头键值，读入的键值会把键名的httl.去掉)java -Dhttl.reloadable=true -Dhttl.modes+=debug
# OS环境变量(只会读取以httl_开头键值，读入的键值会把键名的httl_去掉，并将下划线换成点号) export httl_reloadable=true
# 后面的优先生效

# modes+=develop 加载httl-develop.properties
# 内置debug模式 加载 httl-debug.properties
modes+=debug



# 以复数命名的配置项，表示可以填多个值，用逗号分隔
# =覆盖上一级或缺省配置
# +=上一级或缺省配置值的前面插入值,多值配置时
# -=表示在上一级或缺省配置值上删除值,多值配置时
import.packages+=com.demo.domain
import.methods+=com.demo.utils.TemplateToolMethods
template.directory=/WEB-INF/templates
message.basename=/WEB-INF/messages
input.encoding=UTF-8
output.encoding=UTF-8

code.directory=target/log/java
compile.directory=target/log/classes

# 旧的模板不会被卸载，经常改文件会导致内存perm区越来越大，只能在开发阶段使用
reloadable=true

#生成一份class,编译期就会将模板文件转换成byte[],必须用template.render(Map,OutputStream)否则数据转换会导致性能更低, 哪儿转换？
output.stream=false

#生成一份class,模板文件转换成char[],必须用template.render(Map,Writer)否则数据转换会导致性能更低, webapp中其实默认false, using httl-web.properties
output.writer=true

#预编译所有模板.httl --> .java,否则访问时才编译
precompiled=false

#模板源码和模板文本都不编译到字节码中,模板大于8K时，会导致JVM的JIT优化失效
#通过一个Map缓存做中介，把模板源码和模板文本都放到了runtime属性中，以节省内存perm区大小
source.in.class=true
text.in.class=true

#for dev, 如果模板编译失败,获取更详细的编译出错信息
lint.unchecked=false

#动态插值的过滤会在输出的时候执行，需小心过滤引起性能问题
#value.filters=httl.spi.filters.EscapeXmlFilter

#模板文本过滤会在编译的时候执行，编译时即把模板文本替换掉，不影响输出时的性能
#text.filters=